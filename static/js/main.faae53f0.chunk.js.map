{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["categorias","id","descricao","Jogador","_ref","jogador","onClick","react_default","a","createElement","className","concat","name","App","state","resultadoDado","jogadores","index","jogaDado","Math","round","random","_this","setState","onJogadorClick","forceUpdate","_this2","this","tabuleiro","i","map","el","Object","objectSpread","createTabuleiro","_this$state","filter","j","key","peca","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gOAGMA,SAAa,CACjB,CAACC,GAAI,IAAKC,UAAW,2BACrB,CAACD,GAAI,IAAKC,UAAW,UACrB,CAACD,GAAI,IAAKC,UAAW,cACrB,CAACD,GAAI,IAAKC,UAAW,WACrB,CAACD,GAAI,IAAKC,UAAW,SACrB,CAACD,GAAI,IAAKC,UAAW,iBAiEvB,SAASC,EAATC,GAAqC,IAAnBC,EAAmBD,EAAnBC,QAASC,EAAUF,EAAVE,QACzB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAS,aAAAC,OAAeN,EAAQO,MAAQN,QAASA,IAI3CO,iNA1DbC,MAAQ,CACNC,cAAe,GACfC,UAAW,CACT,CAACJ,KAAM,UAAWK,OAAQ,GAC1B,CAACL,KAAM,YAAaK,OAAQ,GAC5B,CAACL,KAAM,UAAWK,OAAQ,GAC1B,CAACL,KAAM,WAAYK,OAAQ,OAI/BC,SAAW,WACT,IAAMH,EAAgB,EAAII,KAAKC,MAAsB,EAAhBD,KAAKE,UAC1CC,EAAKC,SAAS,CAACR,qBAGjBS,eAAiB,SAACnB,GACZiB,EAAKR,MAAMC,cAAgB,IAC7BV,EAAQY,OAASK,EAAKR,MAAMC,cAC5BO,EAAKG,wFAIA,IAAAC,EAAAC,KACDC,EAjCV,WAEE,IADA,IAAIA,EAAY,GACPC,EAAI,EAAGA,EAAI,GAAIA,IACtBD,EAAYA,EAAUjB,OAAOX,GAG/B,OADA4B,EAAYA,EAAUE,IAAI,SAACC,EAAId,GAAL,OAAAe,OAAAC,EAAA,EAAAD,CAAA,GAAoBD,EAApB,CAAwBd,YA4B9BiB,GADXC,EAE8BR,KAAKb,MAAlCC,EAFDoB,EAECpB,cAAeC,EAFhBmB,EAEgBnB,UACvB,OACET,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,WAAWJ,QAASqB,KAAKT,WAC3CX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBAAiBK,IAElCR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXM,EAAUoB,OAAO,SAAAC,GAAC,OAAiB,IAAbA,EAAEpB,QAAca,IAAI,SAAAzB,GAAO,OACjDE,EAAAC,EAAAC,cAACN,EAAD,CAASmC,IAAKjC,EAAQO,KAAMP,QAASA,EAASC,QAAS,kBAAMoB,EAAKF,eAAenB,QAEnFE,EAAAC,EAAAC,cAAA,QAAMC,UAAU,cAAhB,iBAEAkB,EAAUE,IAAI,SAACS,EAAMV,GAAP,OACdtB,EAAAC,EAAAC,cAAA,OAAK6B,IAAKT,EAAGnB,UAAS,uBAAAC,OAAyB4B,EAAKtC,KAChDe,EAAUoB,OAAO,SAAAC,GAAC,OAAIA,EAAEpB,QAAUY,IAAGC,IAAI,SAAAzB,GAAO,OAChDE,EAAAC,EAAAC,cAACN,EAAD,CAASmC,IAAKjC,EAAQO,KAAMP,QAASA,EAASC,QAAS,kBAAMoB,EAAKF,eAAenB,QAEnFE,EAAAC,EAAAC,cAAA,QAAMC,UAAU,cAAc6B,EAAKtC,gBA5C/BuC,aCTEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxC,EAAAC,EAAAC,cAACuC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.faae53f0.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nconst categorias = [\n  {id: 'P', descricao: 'Pessoa, Lugar ou Animal'},\n  {id: 'O', descricao: 'Objeto'},\n  {id: 'A', descricao: 'A√ß√£o'},\n  {id: 'D', descricao: 'Dificil'},\n  {id: 'L', descricao: 'Lazer'},\n  {id: 'T', descricao: 'Todos Jogam'}\n]\n\nfunction createTabuleiro() {\n  let tabuleiro = []\n  for (let i = 0; i < 10; i++) {\n    tabuleiro = tabuleiro.concat(categorias)\n  }\n  tabuleiro = tabuleiro.map((el, index) => ({...el, index}))\n  return tabuleiro\n}\n\nclass App extends Component {\n  state = {\n    resultadoDado: '',\n    jogadores: [\n      {name: 'arcoiro', index: -1},\n      {name: 'abacalino', index: -1},\n      {name: 'etezudo', index: -1},\n      {name: 'fernanda', index: -1}\n    ]\n  }\n\n  jogaDado = () => {\n    const resultadoDado = 1 + Math.round(Math.random() * 5)\n    this.setState({resultadoDado})\n  }\n\n  onJogadorClick = (jogador) => {\n    if (this.state.resultadoDado > 0) {\n      jogador.index += this.state.resultadoDado\n      this.forceUpdate()\n    }\n  }\n\n  render() {\n    const tabuleiro = createTabuleiro()\n    const { resultadoDado, jogadores } = this.state\n    return (\n      <div className=\"jogo\">\n        <div className=\"controles\">\n          <button className=\"dice-btn\" onClick={this.jogaDado}></button>\n          <div className=\"resultadoDado\">{resultadoDado}</div>\n        </div>\n        <div className=\"tabuleiro\">\n          <div className=\"casa-tabuleiro\">\n            { jogadores.filter(j => j.index === -1).map(jogador =>(\n              <Jogador key={jogador.name} jogador={jogador} onClick={() => this.onJogadorClick(jogador)} />\n            ))}\n            <span className=\"label-casa\">üèÅ</span>\n          </div>\n          { tabuleiro.map((peca, i) => (\n            <div key={i} className={`casa-tabuleiro casa-${peca.id}`}>\n              { jogadores.filter(j => j.index === i).map(jogador =>(\n                <Jogador key={jogador.name} jogador={jogador} onClick={() => this.onJogadorClick(jogador)} />\n              ))}\n              <span className=\"label-casa\">{peca.id}</span>\n            </div>\n          )) }\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction Jogador({jogador, onClick}) {\n  return (\n    <div className={`pino pino-${jogador.name}`} onClick={onClick}></div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}